import{w as d}from"./index-b55d7b60.js";import{a as m,t as f}from"./contourLineStore-22a814b1.js";import{d as g}from"./difficultyStore-686b8d7b.js";import{d as w}from"./debugStore-9d35858d.js";import{i as y,O as v,M as b,S,a as x,b as L,c as M,L as A}from"./@vite-plugin-wasm-pack@wasm-9c455baf.js";import{P as c}from"./index-78deb6b4.js";class j{constructor(e,a,l,_,i,t,n,o,s,p,h){this.tree=e,this.rows=a,this.columns=l,this.width=_,this.height=i,this.curve_point_separation=t,this.svc_distance=n,this.catmull_clark_iterations=o,this.lava_path_length=s,this.lava_path_fork_val=p,this.smoothing_operations=h}apply_to_api(e){e.base(this.tree,this.curve_point_separation),e.set_basic_parameters(this.rows,this.columns,this.width,this.height),e.set_svc_parameters(this.svc_distance),e.set_catmull_clark_parameters(this.catmull_clark_iterations),e.set_lava_path_parameters(this.lava_path_length,this.lava_path_fork_val);for(const a of this.smoothing_operations)a.apply_to_api(e)}}function O(r){return r*(180/Math.PI)}function z(r){let e=r.altitude;return e+=1*r.gradient.map(a=>Math.abs(a)).reduce((a,l)=>Math.max(a,l)),e*1.07}function u(r){const e=new Blob([r],{type:"application/json"});return URL.createObjectURL(e)}function P(){const{subscribe:r,set:e}=d();let a,l,_=!1,i;return{subscribe:r,set:e,setup:async(t,n)=>{_||(await y(),_=!0),l=t.size;const o=new v({pixels_per_curve:t.curves,parent_relations:t.hierarchy});a=new b,new j(o,45,45,t.size.width,t.size.height,5,50,1,20,n,[new S(0,.9,5,1,!1),new x(.7,3,5,!1),new L(2,!1),new M(1,8,1,!1)]).apply_to_api(a)},build:t=>{let n=performance.now();i=a.build().to_js();let o=performance.now();c(w)&&alert(`Generated GLTF model in ${o-n}ms`),i.gltf_url=u(i.gltf),i.lava_gltf_url=u(i.lava_gltf),i.craters=i.craters.map(s=>[s[0]*t.size.width/100,s[1]*t.size.height/100]),m.set(i.craters),e(i)},getAlitituteAndGradient:(t,n=!1)=>{if(!a)return{x:0,y:0,altitude:0,gradient:[0,0,0]};let[o,s]=[t.x,t.y];n||(o=t.x/l.width*100,s=t.y/l.height*100);const p=a.get_altitude_and_gradient_for_point(o,s).to_js();return p.gradient.map(h=>O(h)),p.altitude=z(p),p},computePlayerPoints:t=>{if(!a)return 0;const{width:n,height:o}=l;return a.compute_player_points(new A({lava_paths:i.lava_paths,turbines:c(f).map(s=>[s.x/n*100,s.y/o*100]),max_lava_distance:c(g).max_lava_distance,max_points_total:t}))}}}const C=P();export{C as g};
